# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you generate SLSA provenance file for your project.
# The generation satisfies level 3 for the provenance requirements - see https://slsa.dev/spec/v0.1/requirements
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name:             - ชื่อ: การติดตั้ง .NET Core SDK
  การใช้งาน: actions/setup-dotnet@v4.3.1
  กับ:
    # เวอร์ชัน SDK เสริมที่จะใช้ หากไม่มีให้ จะติดตั้งเวอร์ชัน global.json เมื่อพร้อมใช้งาน ตัวอย่าง: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # ตัวเลือก
    # คุณภาพการสร้างที่เลือกได้ ค่าที่เป็นไปได้คือ: รายวัน, ลงนาม, ตรวจสอบแล้ว, ดูตัวอย่าง, ga
    dotnet-quality: # ตัวเลือก
    # ตำแหน่ง global.json ที่เป็นทางเลือก หาก global.json ของคุณไม่ได้อยู่ในรูทของ repo
    ไฟล์ global-json: # ตัวเลือก
    # แหล่งแพ็คเกจเสริมสำหรับการตั้งค่าการตรวจสอบสิทธิ์ จะตรวจสอบ NuGet.config ที่มีอยู่ใดๆ ในรูทของที่เก็บ และจัดเตรียม NuGet.config ชั่วคราวโดยใช้ตัวแปรสภาพแวดล้อม NUGET_AUTH_TOKEN เป็น ClearTextPassword
    แหล่งที่มา-url: # ตัวเลือก
    # เจ้าของตัวเลือกสำหรับใช้แพ็คเกจจากองค์กร/ผู้ใช้ GitHub Package Registry ที่ไม่ใช่เจ้าของของที่เก็บข้อมูลปัจจุบัน ใช้เฉพาะในกรณีที่ระบุ URL GPR ใน source-url ด้วย
    เจ้าของ: # ตัวเลือก
    # ตำแหน่ง NuGet.config ที่เป็นทางเลือก หาก NuGet.config ของคุณไม่ได้อยู่ในรูทของที่เก็บข้อมูล
    ไฟล์ config: # ตัวเลือก
    # ตัวเลือกอินพุตเพื่อเปิดใช้งานการแคชโฟลเดอร์แพ็คเกจทั่วโลกของ NuGet
    แคช: # ตัวเลือก
    # ใช้เพื่อระบุเส้นทางไปยังไฟล์การอ้างอิง: packages.lock.json รองรับไวด์การ์ดหรือรายชื่อไฟล์สำหรับแคชการอ้างอิงหลายรายการ
    เส้นทางการพึ่งพาแคช: # ตัวเลือก
          
on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digests: ${{ steps.hash.outputs.digests }}

    steps:
      - uses: actions/checkout@v4

      # ========================================================
      #
      # Step 1: Build your artifacts.
      #
      # ========================================================
      - name: Build artifacts
        run: |
            # These are some amazing artifacts.
            echo "artifact1" > artifact1
            echo "artifact2" > artifact2

      # ========================================================
      #
      # Step 2: Add a step to generate the provenance subjects
      #         as shown below. Update the sha256 sum arguments
      #         to include all binaries that you generate
      #         provenance for.
      #
      # ========================================================
      - name: Generate subject for provenance
        id: hash
        run: |
          set -euo pipefail

          # List the artifacts the provenance will refer to.
          files=$(ls artifact*)
          # Generate the subjects (base64 encoded).
          echo "hashes=$(sha256sum $files | base64 -w0)" >> "${GITHUB_OUTPUT}"

  provenance:
    needs: [build]
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.build.outputs.digests }}"
      upload-assets: true # Optional: Upload to a new release
